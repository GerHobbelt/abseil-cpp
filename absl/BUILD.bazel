#
# Copyright 2017 The Abseil Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

load("@bazel_skylib//lib:selects.bzl", "selects")
load(
    "//absl:copts/configure_copts.bzl",
    "ABSL_DEFAULT_COPTS",
    "ABSL_DEFAULT_LINKOPTS",
)
load("//absl:cc_static_library.bzl", "cc_static_library")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

config_setting(
    name = "clang_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "clang",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "gcc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "gcc",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "mingw_unspecified_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "mingw",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "mingw-gcc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "mingw-gcc",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "msvc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "msvc-cl",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "clang-cl_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "clang-cl",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "osx",
    constraint_values = [
        "@platforms//os:osx",
    ],
)

config_setting(
    name = "ios",
    constraint_values = [
        "@platforms//os:ios",
    ],
)

config_setting(
    name = "ppc",
    values = {
        "cpu": "ppc",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "cpu_wasm",
    values = {
        "cpu": "wasm",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "cpu_wasm32",
    values = {
        "cpu": "wasm32",
    },
    visibility = [":__subpackages__"],
)

config_setting(
    name = "platforms_wasm32",
    constraint_values = [
        "@platforms//cpu:wasm32",
    ],
    visibility = [":__subpackages__"],
)

config_setting(
    name = "platforms_wasm64",
    constraint_values = [
        "@platforms//cpu:wasm64",
    ],
    visibility = [":__subpackages__"],
)

selects.config_setting_group(
    name = "wasm",
    match_any = [
        ":cpu_wasm",
        ":cpu_wasm32",
        ":platforms_wasm32",
        ":platforms_wasm64",
    ],
    visibility = [":__subpackages__"],
)

config_setting(
    name = "fuchsia",
    values = {
        "cpu": "fuchsia",
    },
    visibility = [":__subpackages__"],
)

selects.config_setting_group(
    name = "mingw_compiler",
    match_any = [
        ":mingw_unspecified_compiler",
        ":mingw-gcc_compiler",
    ],
    visibility = [":__subpackages__"],
)

# cc_library rule for all publicly visible, non-test absl targets. This list is generated by
# running:
#   bazel query 'attr(testonly, 0, kind("cc_library", //...)) intersect
#                attr(visibility, "//visibility:public", //...)'
# We should also run the following query to verify that every cc_library rule has alwayslink=True
# (otherwise it will not be linked into the final library). The query should return no results once
# all dependencies below have alwayslink=True.
#   bazel query 'attr(testonly, 0, kind("cc_library", //...)) except attr(alwayslink, 1, //...)'
cc_library(
    alwayslink = True,
    name = "absl",
    copts = ABSL_DEFAULT_COPTS,
    linkopts = ABSL_DEFAULT_LINKOPTS,
    deps = [
        "//absl/algorithm:algorithm",
        "//absl/algorithm:container",
        "//absl/base:base",
        "//absl/base:config",
        "//absl/base:core_headers",
        "//absl/base:dynamic_annotations",
        "//absl/base:endian",
        "//absl/base:log_severity",
        "//absl/base:malloc_internal",
        "//absl/base:no_destructor",
        "//absl/base:nullability",
        "//absl/base:prefetch",
        "//absl/cleanup:cleanup",
        "//absl/cleanup:cleanup_internal",
        "//absl/container:btree",
        "//absl/container:common",
        "//absl/container:compressed_tuple",
        "//absl/container:container_memory",
        "//absl/container:fixed_array",
        "//absl/container:flat_hash_map",
        "//absl/container:flat_hash_set",
        "//absl/container:hash_container_defaults",
        "//absl/container:hash_policy_traits",
        "//absl/container:hashtable_debug",
        "//absl/container:hashtable_debug_hooks",
        "//absl/container:hashtablez_sampler",
        "//absl/container:inlined_vector",
        "//absl/container:inlined_vector_internal",
        "//absl/container:layout",
        "//absl/container:node_hash_map",
        "//absl/container:node_hash_set",
        "//absl/container:node_slot_policy",
        "//absl/container:raw_hash_map",
        "//absl/container:raw_hash_set",
        "//absl/crc:crc32c",
        "//absl/debugging:bounded_utf8_length_sequence",
        "//absl/debugging:decode_rust_punycode",
        "//absl/debugging:demangle_rust",
        "//absl/debugging:failure_signal_handler",
        "//absl/debugging:leak_check",
        "//absl/debugging:stacktrace",
        "//absl/debugging:symbolize",
        "//absl/debugging:utf8_for_code_point",
        "//absl/flags:commandlineflag",
        "//absl/flags:config",
        "//absl/flags:flag",
        "//absl/flags:marshalling",
        "//absl/flags:parse",
        "//absl/flags:reflection",
        "//absl/flags:usage",
        "//absl/functional:any_invocable",
        "//absl/functional:bind_front",
        "//absl/functional:function_ref",
        "//absl/functional:overload",
        "//absl/hash:city",
        "//absl/hash:hash",
        "//absl/log:absl_check",
        "//absl/log:absl_log",
        "//absl/log:absl_vlog_is_on",
        "//absl/log:check",
        "//absl/log:die_if_null",
        "//absl/log:flags",
        "//absl/log:globals",
        "//absl/log:initialize",
        "//absl/log:log",
        "//absl/log:log_entry",
        "//absl/log:log_sink",
        "//absl/log:log_sink_registry",
        "//absl/log:log_streamer",
        "//absl/log:structured",
        "//absl/log:vlog_is_on",
        "//absl/memory:memory",
        "//absl/meta:type_traits",
        "//absl/numeric:bits",
        "//absl/numeric:int128",
        "//absl/numeric:representation",
        "//absl/random:bit_gen_ref",
        "//absl/random:distributions",
        "//absl/random:random",
        "//absl/random:seed_gen_exception",
        "//absl/random:seed_sequences",
        "//absl/status:status",
        "//absl/status:statusor",
        "//absl/strings:charset",
        "//absl/strings:cord",
        "//absl/strings:has_ostream_operator",
        "//absl/strings:internal",
        "//absl/strings:str_format",
        "//absl/strings:string_view",
        "//absl/strings:strings",
        "//absl/synchronization:synchronization",
        "//absl/time:time",
        "//absl/time/internal/cctz:civil_time",
        "//absl/time/internal/cctz:time_zone",
        "//absl/types:any",
        "//absl/types:bad_any_cast",
        "//absl/types:bad_optional_access",
        "//absl/types:bad_variant_access",
        "//absl/types:compare",
        "//absl/types:optional",
        "//absl/types:span",
        "//absl/types:variant",
        "//absl/utility:if_constexpr",
        "//absl/utility:utility"
    ],
)

cc_binary(
    name = "absl_shared",
    deps = [
        ":absl",
    ],
    linkshared = True,
)

# Uses the custom rule in cc_static_library.bzl to build a static library from the absl target.
# TODO: An experimental rule for building static libraries was added in Bazel 7.4.0rc1.
#       See https://github.com/bazelbuild/bazel/issues/1920.
cc_static_library(
    name = "absl_static",
    dep = ":absl"
)
